const s = require('@luxuryescapes/strummer')
const generateSwagger = require('../lib/generate-swagger')
const generateServerTypes = require('../lib/generate-server-types')

const nullOrString = () =>
  s.createMatcher({
    initialize: function () {
      this.matcher = s.string()
    },
    match: function (path, value) {
      if (value === null && typeof value === 'object') return
      return this.matcher.match(path, value)
    },
    toJSONSchema: function () {
      return { type: ['null', 'string'] }
    }
  })()

describe('generateTypes', () => {
  it('creates definitions for deep options', async () => {
    const rateSchema = s('rate', s.object({
      id: s.uuid(),
      comment: nullOrString(),
      opt: s.optional(
        s.oneOf([
          s.enum({ values: ['hotel_only', 'hotel_package'], type: 'string' }),
          s.array({
            of: s.enum({
              values: ['hotel_only', 'hotel_package'],
              type: 'string'
            })
          })
        ])
      ),
      req: s.oneOf([
        s.enum({ values: ['hotel_only', 'hotel_package'], type: 'string' }),
        s.array({
          of: s.enum({
            values: ['hotel_only', 'hotel_package'],
            type: 'string'
          })
        })
      ])
    }))

    const swagger = generateSwagger(
      {
        get: {
          '/': {
            schema: { request: {}, responses: { 200: rateSchema } }
          }
        }
      },
      {}
    )
    const output = await generateServerTypes(swagger)

    expect(output).toEqual(`/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: operations["//get"];
  };
}

export interface components {
  schemas: {
    rate: {
      /** Format: uuid */
      id: string;
      comment: null | string;
      opt?:
        | ("hotel_only" | "hotel_package")
        | ("hotel_only" | "hotel_package")[];
      req:
        | ("hotel_only" | "hotel_package")
        | ("hotel_only" | "hotel_package")[];
    };
  };
}

export interface operations {
  "//get": {
    parameters: {
      header: {
        /** Cookie */
        Cookie: string;
      };
    };
    responses: {
      /** 200 response */
      200: {
        content: {
          "application/json": definitions["rate"];
        };
      };
    };
  };
}

export interface external {}
`)
  })
})
